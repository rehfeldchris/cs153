/* Generated By:JavaCC: Do not edit this line. LOLCodeParser.java */
import java.io.*;
    public class LOLCodeParser implements LOLCodeParserConstants {
          public static void main(String[] args) throws FileNotFoundException
          {
             java.io.FileReader inputFile = new java.io.FileReader(args[0]);
             LOLCodeParser parser = new LOLCodeParser(inputFile);

             try {
                parser.LOLCodeProgram();
             }
             catch (ParseException ex) {
               ex.printStackTrace();
             }
          }

          public static void printCallerMethodName()
          {
            StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
            System.out.println(stackTraceElements[2].getMethodName());
          }

  static final public void LOLCodeProgram() throws ParseException {
    programStart();
    codeBlock();
    programEnd();
   System.out.println("Parsed LOLCode Program");
  }

  static final public void codeBlock() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUBTRACT:
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
      case BIGGR:
      case SMALLR:
      case XOR:
      case LOGICAL_AND:
      case LOGICAL_OR:
      case INCREMENT:
      case DECREMENT:
      case LOGICAL_NOT:
      case NOT_EQUAL:
      case ALL:
      case ANY:
      case MAEK:
      case SMOOSH:
      case FAIL:
      case I_HAS_A:
      case HOW_DUZ_I:
      case IM_IN_YR:
      case O:
      case WIN:
      case WTF:
      case IDENTIFIER:
      case STRING:
      case CHARACTER:
      case REAL_NUMBER:
      case DECIMAL_INTEGER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      expressionOrStatement();
    }
  }

  static final public void programStart() throws ParseException {
                       printCallerMethodName();
    jj_consume_token(HAI);
  }

  static final public void programEnd() throws ParseException {
                     printCallerMethodName();
    jj_consume_token(KTHXBYE);
    jj_consume_token(0);
  }

  static final public void expressionOrStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HAS_A:
    case HOW_DUZ_I:
    case IM_IN_YR:
    case O:
    case WTF:
    case IDENTIFIER:
      statement();
      break;
    case ADD:
    case SUBTRACT:
    case MULTIPLY:
    case DIVIDE:
    case MODULO:
    case BIGGR:
    case SMALLR:
    case XOR:
    case LOGICAL_AND:
    case LOGICAL_OR:
    case INCREMENT:
    case DECREMENT:
    case LOGICAL_NOT:
    case NOT_EQUAL:
    case ALL:
    case ANY:
    case MAEK:
    case SMOOSH:
    case FAIL:
    case WIN:
    case STRING:
    case CHARACTER:
    case REAL_NUMBER:
    case DECIMAL_INTEGER:
      expression();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void statement() throws ParseException {
    if (jj_2_1(4)) {
      ifStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IM_IN_YR:
        whileStatement();
        break;
      case IDENTIFIER:
        variableAssignmentStatement();
        break;
      case WTF:
        caseStatement();
        break;
      case HOW_DUZ_I:
        functionDeclarationStatement();
        break;
      case I_HAS_A:
        variableDeclarationStatement();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ifStatement() throws ParseException {
                      printCallerMethodName();
    jj_consume_token(O);
    jj_consume_token(RLY);
    jj_consume_token(YA);
    jj_consume_token(RLY);
    codeBlock();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NO:
      jj_consume_token(NO);
      jj_consume_token(WAI);
      codeBlock();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(OIC);
  }

  static final public void whileStatement() throws ParseException {
                         printCallerMethodName();
    jj_consume_token(IM_IN_YR);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(YR);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIL:
      case WILE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIL:
          jj_consume_token(TIL);
          break;
        case WILE:
          jj_consume_token(WILE);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        booleanExpression();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    codeBlock();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GTFO:
      jj_consume_token(GTFO);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(IM_OUTTA_YR);
    jj_consume_token(IDENTIFIER);
  }

  static final public void caseStatement() throws ParseException {
                        printCallerMethodName();
    jj_consume_token(WTF);
    label_2:
    while (true) {
      jj_consume_token(OMG);
      constantExpression();
      codeBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GTFO:
        jj_consume_token(GTFO);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OMG:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMGWTF:
      jj_consume_token(OMGWTF);
      codeBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GTFO:
        jj_consume_token(GTFO);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(OIC);
  }

  static final public void functionDeclarationStatement() throws ParseException {
                                       printCallerMethodName();
    jj_consume_token(HOW_DUZ_I);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case YR:
      jj_consume_token(YR);
      jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AN:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_3;
        }
        jj_consume_token(AN);
        jj_consume_token(YR);
        jj_consume_token(IDENTIFIER);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    codeBlock();
    jj_consume_token(IF_U_SAY_SO);
  }

  static final public void expression() throws ParseException {
    if (jj_2_2(2)) {
      simpleExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUBTRACT:
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
      case BIGGR:
      case SMALLR:
        basicMathExpression();
        break;
      default:
        jj_la1[15] = jj_gen;
        if (jj_2_3(2)) {
          booleanExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SMOOSH:
            stringConcatenationExpression();
            break;
          default:
            jj_la1[16] = jj_gen;
            if (jj_2_4(2)) {
              typeCastExpression();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INCREMENT:
              case DECREMENT:
                unaryExpression();
                break;
              default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  static final public void basicMathExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      additionExpression();
      break;
    case SUBTRACT:
      subtractionExpression();
      break;
    case MULTIPLY:
      multiplicationExpression();
      break;
    case DIVIDE:
      divisionExpression();
      break;
    case MODULO:
      moduloExpression();
      break;
    case BIGGR:
      maximumExpression();
      break;
    case SMALLR:
      minimumExpression();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void booleanExpression() throws ParseException {
    if (jj_2_5(2)) {
      logicalAndExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        logicalOrExpression();
        break;
      case XOR:
        logicalXorExpression();
        break;
      case LOGICAL_NOT:
        logicalNotExpression();
        break;
      case ALL:
        logicalAndListExpression();
        break;
      case ANY:
        logicalOrListExpression();
        break;
      case LOGICAL_AND:
        equalsExpression();
        break;
      case NOT_EQUAL:
        notEqualsExpression();
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_6(2)) {
          greaterThanExpression();
        } else if (jj_2_7(2)) {
          lessThanExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void constantExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case REAL_NUMBER:
      jj_consume_token(REAL_NUMBER);
      break;
    case DECIMAL_INTEGER:
      jj_consume_token(DECIMAL_INTEGER);
      break;
    case FAIL:
    case WIN:
      troof();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void simpleExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case FAIL:
    case WIN:
    case STRING:
    case CHARACTER:
    case REAL_NUMBER:
    case DECIMAL_INTEGER:
      constantExpression();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void binaryOperands() throws ParseException {
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AN:
      jj_consume_token(AN);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    expression();
  }

  static final public void variableArityOperands() throws ParseException {
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MKAY:
      jj_consume_token(MKAY);
      break;
    case ADD:
    case SUBTRACT:
    case MULTIPLY:
    case DIVIDE:
    case MODULO:
    case BIGGR:
    case SMALLR:
    case XOR:
    case LOGICAL_AND:
    case LOGICAL_OR:
    case INCREMENT:
    case DECREMENT:
    case LOGICAL_NOT:
    case NOT_EQUAL:
    case ALL:
    case ANY:
    case MAEK:
    case SMOOSH:
    case AN:
    case FAIL:
    case WIN:
    case IDENTIFIER:
    case STRING:
    case CHARACTER:
    case REAL_NUMBER:
    case DECIMAL_INTEGER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AN:
        jj_consume_token(AN);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      variableArityOperands();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*Some basic math operators follow, like addition, subtraction etc...*/
  static final public void additionExpression() throws ParseException {
                             printCallerMethodName();
    jj_consume_token(ADD);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void subtractionExpression() throws ParseException {
                                printCallerMethodName();
    jj_consume_token(SUBTRACT);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void multiplicationExpression() throws ParseException {
                                   printCallerMethodName();
    jj_consume_token(MULTIPLY);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void divisionExpression() throws ParseException {
                             printCallerMethodName();
    jj_consume_token(DIVIDE);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void moduloExpression() throws ParseException {
                           printCallerMethodName();
    jj_consume_token(MODULO);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void maximumExpression() throws ParseException {
                            printCallerMethodName();
    jj_consume_token(BIGGR);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void minimumExpression() throws ParseException {
                            printCallerMethodName();
    jj_consume_token(SMALLR);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void unaryExpression() throws ParseException {
                          printCallerMethodName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
      jj_consume_token(INCREMENT);
      break;
    case DECREMENT:
      jj_consume_token(DECREMENT);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expression();
  }

/* Some statements for assigning and declaring variables follow */
  static final public void variableDeclarationStatement() throws ParseException {
                                       printCallerMethodName();
    jj_consume_token(I_HAS_A);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ITZ:
      jj_consume_token(ITZ);
      expression();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  static final public void variableAssignmentStatement() throws ParseException {
                                      printCallerMethodName();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGNMENT);
    expression();
  }

/* Some boolean operators follow */
  static final public void logicalAndExpression() throws ParseException {
                               printCallerMethodName();
    jj_consume_token(LOGICAL_AND);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void logicalOrExpression() throws ParseException {
                              printCallerMethodName();
    jj_consume_token(LOGICAL_OR);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void logicalXorExpression() throws ParseException {
                               printCallerMethodName();
    jj_consume_token(XOR);
    jj_consume_token(OF);
    binaryOperands();
  }

  static final public void logicalNotExpression() throws ParseException {
                               printCallerMethodName();
    jj_consume_token(LOGICAL_NOT);
    expression();
  }

/*"all of foo an bar an baz" in lolcode is like "foo && bar && baz" in java*/
  static final public void logicalAndListExpression() throws ParseException {
                                   printCallerMethodName();
    jj_consume_token(ALL);
    jj_consume_token(OF);
    variableArityOperands();
  }

/*"any of foo an bar an baz" in lolcode is like "foo || bar || baz" in java*/
  static final public void logicalOrListExpression() throws ParseException {
                                  printCallerMethodName();
    jj_consume_token(ANY);
    jj_consume_token(OF);
    variableArityOperands();
  }

/*comparison operators*/
  static final public void equalsExpression() throws ParseException {
                           printCallerMethodName();
    jj_consume_token(LOGICAL_AND);
    jj_consume_token(EQUAL);
    binaryOperands();
  }

  static final public void notEqualsExpression() throws ParseException {
                              printCallerMethodName();
    jj_consume_token(NOT_EQUAL);
    binaryOperands();
  }

  static final public void lessThanExpression() throws ParseException {
                             printCallerMethodName();
    simpleExpression();
    jj_consume_token(SMALLR);
    jj_consume_token(THAN);
    expression();
  }

  static final public void greaterThanExpression() throws ParseException {
                                printCallerMethodName();
    simpleExpression();
    jj_consume_token(BIGGR);
    jj_consume_token(THAN);
    expression();
  }

/*string concatenation*/
  static final public void stringConcatenationExpression() throws ParseException {
                                        printCallerMethodName();
    jj_consume_token(SMOOSH);
    variableArityOperands();
  }

/*types and casting */
  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TROOF:
      jj_consume_token(TROOF);
      break;
    case YARN:
      jj_consume_token(YARN);
      break;
    case NUMBAR:
      jj_consume_token(NUMBAR);
      break;
    case NUMBR:
      jj_consume_token(NUMBR);
      break;
    case NOOB:
      jj_consume_token(NOOB);
      break;
    case BUKKIT:
      jj_consume_token(BUKKIT);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void troof() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WIN:
      jj_consume_token(WIN);
      break;
    case FAIL:
      jj_consume_token(FAIL);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void typeCastExpression() throws ParseException {
                             printCallerMethodName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAEK:
      jj_consume_token(MAEK);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case A:
        jj_consume_token(A);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      type();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      jj_consume_token(IS);
      jj_consume_token(NOW);
      jj_consume_token(A);
      type();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(ANY)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ALL)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(O)) return true;
    if (jj_scan_token(RLY)) return true;
    if (jj_scan_token(YA)) return true;
    if (jj_scan_token(RLY)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LOGICAL_NOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(XOR)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(MAEK)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(SMALLR)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(BIGGR)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(SMOOSH)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(BIGGR)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(SMALLR)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(SUBTRACT)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LOLCodeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7e7ff80,0x7e7ff80,0x0,0x0,0x60000,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f80,0x4000000,0x60000,0x3f80,0x1e1c000,0x0,0x0,0x0,0x0,0x7e7ff80,0x60000,0x0,0x0,0x0,0x0,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4002c200,0x4002c200,0x2c000,0x2000000,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x1000,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x80,0x80,0x1000280,0x0,0x100000,0x34000100,0x200,0x40,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1f1800,0x1f1800,0x11000,0x0,0x0,0x440,0x440,0x0,0x0,0x0,0x2,0x0,0x4,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x1e0800,0x1f0800,0x0,0x0,0x1f0800,0x0,0x0,0x4080,0x800,0x0,0x10000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LOLCodeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LOLCodeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LOLCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LOLCodeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LOLCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LOLCodeParser(LOLCodeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LOLCodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
