/* Generated By:JavaCC: Do not edit this line. LOLCodeParser.java */
import java.io.*;
    public class LOLCodeParser implements LOLCodeParserConstants {
          public static void main(String[] args) throws FileNotFoundException
          {
             java.io.FileReader inputFile = new java.io.FileReader(args[0]);
             LOLCodeParser parser = new LOLCodeParser(inputFile);

             try {
                parser.LOLCodeProgram();
             }
             catch (ParseException ex) {
               ex.printStackTrace();
             }
          }

  static final public void LOLCodeProgram() throws ParseException {
    trace_call("LOLCodeProgram");
    try {
      programStart();
      codeBlock();
      programEnd();
   System.out.println("Parsed LOLCode Program");
    } finally {
      trace_return("LOLCodeProgram");
    }
  }

  static final public void codeBlock() throws ParseException {
    trace_call("codeBlock");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUBTRACT:
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
        case MAXIMUM:
        case MINIMUM:
        case XOR:
        case LOGICAL_AND:
        case LOGICAL_OR:
        case INCREMENT:
        case DECREMENT:
        case LOGICAL_NOT:
        case NOT_EQUAL:
        case ALL:
        case ANY:
        case MAEK:
        case SMOOSH:
        case FAIL:
        case HOW:
        case I:
        case IM:
        case O:
        case WIN:
        case WTF:
        case IDENTIFIER:
        case STRING:
        case CHARACTER:
        case REAL_NUMBER:
        case DECIMAL_INTEGER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        expressionOrStatement();
      }
    } finally {
      trace_return("codeBlock");
    }
  }

  static final public void Variable(StringBuffer sb) throws ParseException {
    trace_call("Variable");
    try {
      jj_consume_token(IDENTIFIER);
                sb.append(token.image);
   System.out.println("Variable: " + sb.toString());
    } finally {
      trace_return("Variable");
    }
  }

  static final public void programStart() throws ParseException {
    trace_call("programStart");
    try {
      jj_consume_token(HAI);
    } finally {
      trace_return("programStart");
    }
  }

  static final public void programEnd() throws ParseException {
    trace_call("programEnd");
    try {
      jj_consume_token(KTHXBYE);
      jj_consume_token(0);
    } finally {
      trace_return("programEnd");
    }
  }

  static final public void expressionOrStatement() throws ParseException {
    trace_call("expressionOrStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOW:
      case I:
      case IM:
      case O:
      case WTF:
      case IDENTIFIER:
        statement();
        break;
      case ADD:
      case SUBTRACT:
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
      case MAXIMUM:
      case MINIMUM:
      case XOR:
      case LOGICAL_AND:
      case LOGICAL_OR:
      case INCREMENT:
      case DECREMENT:
      case LOGICAL_NOT:
      case NOT_EQUAL:
      case ALL:
      case ANY:
      case MAEK:
      case SMOOSH:
      case FAIL:
      case WIN:
      case STRING:
      case CHARACTER:
      case REAL_NUMBER:
      case DECIMAL_INTEGER:
        expression();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expressionOrStatement");
    }
  }

  static final public void statement() throws ParseException {
    trace_call("statement");
    try {
      if (jj_2_1(4)) {
        ifStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IM:
          whileStatement();
          break;
        case IDENTIFIER:
          variableAssignmentStatement();
          break;
        case WTF:
          caseStatement();
          break;
        case HOW:
          functionDeclarationStatement();
          break;
        case I:
          variableDeclarationStatement();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("statement");
    }
  }

  static final public void ifStatement() throws ParseException {
    trace_call("ifStatement");
    try {
      jj_consume_token(O);
      jj_consume_token(RLY);
      jj_consume_token(YA);
      jj_consume_token(RLY);
      codeBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NO:
        jj_consume_token(NO);
        jj_consume_token(WAI);
        codeBlock();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(OIC);
    } finally {
      trace_return("ifStatement");
    }
  }

  static final public void whileStatement() throws ParseException {
    trace_call("whileStatement");
    try {
      jj_consume_token(IM);
      jj_consume_token(IN);
      jj_consume_token(YR);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(YR);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIL:
      case WILE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIL:
          jj_consume_token(TIL);
          break;
        case WILE:
          jj_consume_token(WILE);
          expression();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      codeBlock();
      jj_consume_token(IM);
      jj_consume_token(OUTTA);
      jj_consume_token(YR);
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("whileStatement");
    }
  }

  static final public void caseStatement() throws ParseException {
    trace_call("caseStatement");
    try {
      jj_consume_token(WTF);
      label_2:
      while (true) {
        jj_consume_token(OMG);
        constantExpression();
        codeBlock();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OMG:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OMGWTF:
        jj_consume_token(OMGWTF);
        codeBlock();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(OIC);
    } finally {
      trace_return("caseStatement");
    }
  }

  static final public void functionDeclarationStatement() throws ParseException {
    trace_call("functionDeclarationStatement");
    try {
      jj_consume_token(HOW);
      jj_consume_token(DUZ);
      jj_consume_token(I);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YR:
        jj_consume_token(YR);
        jj_consume_token(IDENTIFIER);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AN:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_3;
          }
          jj_consume_token(AN);
          jj_consume_token(YR);
          jj_consume_token(IDENTIFIER);
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      codeBlock();
      jj_consume_token(IF);
      jj_consume_token(U);
      jj_consume_token(SAY);
      jj_consume_token(SO);
    } finally {
      trace_return("functionDeclarationStatement");
    }
  }

  static final public void expression() throws ParseException {
    trace_call("expression");
    try {
      if (jj_2_2(2)) {
        simpleExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUBTRACT:
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
        case MAXIMUM:
        case MINIMUM:
          basicMathExpression();
          break;
        case XOR:
        case LOGICAL_AND:
        case LOGICAL_OR:
        case LOGICAL_NOT:
        case NOT_EQUAL:
        case ALL:
        case ANY:
          booleanExpression();
          break;
        case SMOOSH:
          stringConcatenationExpression();
          break;
        case MAEK:
        case IDENTIFIER:
          typeCastExpression();
          break;
        case INCREMENT:
        case DECREMENT:
          unaryExpression();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expression");
    }
  }

  static final public void basicMathExpression() throws ParseException {
    trace_call("basicMathExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        additionExpression();
        break;
      case SUBTRACT:
        subtractionExpression();
        break;
      case MULTIPLY:
        multiplicationExpression();
        break;
      case DIVIDE:
        divisionExpression();
        break;
      case MODULO:
        moduloExpression();
        break;
      case MAXIMUM:
        maximumExpression();
        break;
      case MINIMUM:
        minimumExpression();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("basicMathExpression");
    }
  }

  static final public void booleanExpression() throws ParseException {
    trace_call("booleanExpression");
    try {
      if (jj_2_3(2)) {
        logicalAndExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGICAL_OR:
          logicalOrExpression();
          break;
        case XOR:
          logicalXorExpression();
          break;
        case LOGICAL_NOT:
          logicalNotExpression();
          break;
        case ALL:
          logicalAndListExpression();
          break;
        case ANY:
          logicalOrListExpression();
          break;
        case LOGICAL_AND:
          equalsExpression();
          break;
        case NOT_EQUAL:
          notEqualsExpression();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("booleanExpression");
    }
  }

  static final public void constantExpression() throws ParseException {
    trace_call("constantExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
        break;
      case REAL_NUMBER:
        jj_consume_token(REAL_NUMBER);
        break;
      case DECIMAL_INTEGER:
        jj_consume_token(DECIMAL_INTEGER);
        break;
      case FAIL:
      case WIN:
        troof();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("constantExpression");
    }
  }

  static final public void simpleExpression() throws ParseException {
    trace_call("simpleExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case FAIL:
      case WIN:
      case STRING:
      case CHARACTER:
      case REAL_NUMBER:
      case DECIMAL_INTEGER:
        constantExpression();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("simpleExpression");
    }
  }

  static final public void binaryOperands() throws ParseException {
    trace_call("binaryOperands");
    try {
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AN:
        jj_consume_token(AN);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      expression();
    } finally {
      trace_return("binaryOperands");
    }
  }

  static final public void variableArityOperands() throws ParseException {
    trace_call("variableArityOperands");
    try {
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MKAY:
        jj_consume_token(MKAY);
        break;
      case ADD:
      case SUBTRACT:
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
      case MAXIMUM:
      case MINIMUM:
      case XOR:
      case LOGICAL_AND:
      case LOGICAL_OR:
      case INCREMENT:
      case DECREMENT:
      case LOGICAL_NOT:
      case NOT_EQUAL:
      case ALL:
      case ANY:
      case MAEK:
      case SMOOSH:
      case AN:
      case FAIL:
      case WIN:
      case IDENTIFIER:
      case STRING:
      case CHARACTER:
      case REAL_NUMBER:
      case DECIMAL_INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AN:
          jj_consume_token(AN);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        variableArityOperands();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("variableArityOperands");
    }
  }

/*Some basic math operators follow, like addition, subtraction etc...*/
  static final public void additionExpression() throws ParseException {
    trace_call("additionExpression");
    try {
      jj_consume_token(ADD);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("additionExpression");
    }
  }

  static final public void subtractionExpression() throws ParseException {
    trace_call("subtractionExpression");
    try {
      jj_consume_token(SUBTRACT);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("subtractionExpression");
    }
  }

  static final public void multiplicationExpression() throws ParseException {
    trace_call("multiplicationExpression");
    try {
      jj_consume_token(MULTIPLY);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("multiplicationExpression");
    }
  }

  static final public void divisionExpression() throws ParseException {
    trace_call("divisionExpression");
    try {
      jj_consume_token(DIVIDE);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("divisionExpression");
    }
  }

  static final public void moduloExpression() throws ParseException {
    trace_call("moduloExpression");
    try {
      jj_consume_token(MODULO);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("moduloExpression");
    }
  }

  static final public void maximumExpression() throws ParseException {
    trace_call("maximumExpression");
    try {
      jj_consume_token(MAXIMUM);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("maximumExpression");
    }
  }

  static final public void minimumExpression() throws ParseException {
    trace_call("minimumExpression");
    try {
      jj_consume_token(MINIMUM);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("minimumExpression");
    }
  }

  static final public void unaryExpression() throws ParseException {
    trace_call("unaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression();
    } finally {
      trace_return("unaryExpression");
    }
  }

/* Some statements for assigning and declaring variables follow */
  static final public void variableDeclarationStatement() throws ParseException {
    trace_call("variableDeclarationStatement");
    try {
                                       System.out.println("variableDeclarationStatement");
      jj_consume_token(I);
      jj_consume_token(HAS);
      jj_consume_token(A);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITZ:
        jj_consume_token(ITZ);
        expression();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("variableDeclarationStatement");
    }
  }

  static final public void variableAssignmentStatement() throws ParseException {
    trace_call("variableAssignmentStatement");
    try {
                                      System.out.println("variableAssignmentStatement");
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGNMENT);
      expression();
    } finally {
      trace_return("variableAssignmentStatement");
    }
  }

  static final public void variableDeclaration() throws ParseException {
    trace_call("variableDeclaration");
    try {
                              System.out.println("variableDeclaration");
      jj_consume_token(I);
      jj_consume_token(HAS);
      jj_consume_token(A);
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("variableDeclaration");
    }
  }

/* Some boolean operators follow */
  static final public void logicalAndExpression() throws ParseException {
    trace_call("logicalAndExpression");
    try {
      jj_consume_token(LOGICAL_AND);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("logicalAndExpression");
    }
  }

  static final public void logicalOrExpression() throws ParseException {
    trace_call("logicalOrExpression");
    try {
      jj_consume_token(LOGICAL_OR);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("logicalOrExpression");
    }
  }

  static final public void logicalXorExpression() throws ParseException {
    trace_call("logicalXorExpression");
    try {
      jj_consume_token(XOR);
      jj_consume_token(OF);
      binaryOperands();
    } finally {
      trace_return("logicalXorExpression");
    }
  }

  static final public void logicalNotExpression() throws ParseException {
    trace_call("logicalNotExpression");
    try {
      jj_consume_token(LOGICAL_NOT);
      expression();
    } finally {
      trace_return("logicalNotExpression");
    }
  }

/*"all of foo an bar an baz" in lolcode is like "foo && bar && baz" in java*/
  static final public void logicalAndListExpression() throws ParseException {
    trace_call("logicalAndListExpression");
    try {
      jj_consume_token(ALL);
      jj_consume_token(OF);
      variableArityOperands();
    } finally {
      trace_return("logicalAndListExpression");
    }
  }

/*"any of foo an bar an baz" in lolcode is like "foo || bar || baz" in java*/
  static final public void logicalOrListExpression() throws ParseException {
    trace_call("logicalOrListExpression");
    try {
      jj_consume_token(ANY);
      jj_consume_token(OF);
      variableArityOperands();
    } finally {
      trace_return("logicalOrListExpression");
    }
  }

/*comparison operators*/
  static final public void equalsExpression() throws ParseException {
    trace_call("equalsExpression");
    try {
      jj_consume_token(LOGICAL_AND);
      jj_consume_token(EQUAL);
      binaryOperands();
    } finally {
      trace_return("equalsExpression");
    }
  }

  static final public void notEqualsExpression() throws ParseException {
    trace_call("notEqualsExpression");
    try {
      jj_consume_token(NOT_EQUAL);
      binaryOperands();
    } finally {
      trace_return("notEqualsExpression");
    }
  }

/*string concatenation*/
  static final public void stringConcatenationExpression() throws ParseException {
    trace_call("stringConcatenationExpression");
    try {
      jj_consume_token(SMOOSH);
      variableArityOperands();
    } finally {
      trace_return("stringConcatenationExpression");
    }
  }

/*types and casting */
  static final public void type() throws ParseException {
    trace_call("type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TROOF:
        jj_consume_token(TROOF);
        break;
      case YARN:
        jj_consume_token(YARN);
        break;
      case NUMBAR:
        jj_consume_token(NUMBAR);
        break;
      case NUMBR:
        jj_consume_token(NUMBR);
        break;
      case NOOB:
        jj_consume_token(NOOB);
        break;
      case BUKKIT:
        jj_consume_token(BUKKIT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type");
    }
  }

  static final public void troof() throws ParseException {
    trace_call("troof");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WIN:
        jj_consume_token(WIN);
        break;
      case FAIL:
        jj_consume_token(FAIL);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("troof");
    }
  }

  static final public void typeCastExpression() throws ParseException {
    trace_call("typeCastExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAEK:
        jj_consume_token(MAEK);
        expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case A:
          jj_consume_token(A);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        type();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(IS);
        jj_consume_token(NOW);
        jj_consume_token(A);
        type();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("typeCastExpression");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(O)) return true;
    if (jj_scan_token(RLY)) return true;
    if (jj_scan_token(YA)) return true;
    if (jj_scan_token(RLY)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LOLCodeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7e7ff80,0x7e7ff80,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x7e7ff80,0x3f80,0x1e1c000,0x0,0x0,0x0,0x0,0x7e7ff80,0x60000,0x0,0x0,0x0,0x0,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xb0400,0xb0400,0xb0000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x400,0x400,0x80,0x80,0x4000480,0x0,0x400000,0xd0000100,0x400,0x40,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x3e30001,0x3e30001,0x220000,0x0,0x0,0x8400,0x8400,0x8,0x10,0x0,0x100000,0x200000,0x0,0x0,0x3c10000,0x3e10000,0x0,0x0,0x3e10000,0x0,0x0,0x80800,0x10000,0x0,0x200000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LOLCodeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LOLCodeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LOLCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LOLCodeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LOLCodeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LOLCodeParser(LOLCodeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LOLCodeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[92];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 92; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
