/* Generated By:JavaCC: Do not edit this line. LOLCodeParserTokenManager.java */
import java.io.*;

/** Token Manager. */
public class LOLCodeParserTokenManager implements LOLCodeParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0L)
            return 12;
         if ((active0 & 0x3ffffe0006776f80L) != 0L || (active1 & 0xffe0L) != 0L)
         {
            jjmatchedKind = 80;
            return 7;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 34;
         if ((active0 & 0xc00000c001880010L) != 0L || (active1 & 0x1fL) != 0L)
            return 7;
         if ((active0 & 0x10000009000L) != 0L)
         {
            jjmatchedKind = 80;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x31c7bf0006d7ff90L) != 0L || (active1 & 0x1fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x8e38008001200000L) != 0L || (active1 & 0xe000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x35c09f000657b710L) != 0L || (active1 & 0x55a0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return 7;
         }
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x810200001a04880L) != 0L || (active1 & 0xa5fL) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x30c00d0004073600L) != 0L || (active1 & 0x184L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 3;
            }
            return 7;
         }
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x500120002508110L) != 0L || (active1 & 0x4420L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1040090004452600L) != 0L || (active1 & 0x104L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x2080040000021000L) != 0L || (active1 & 0x80L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40000000400600L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x1000090004052000L) != 0L || (active1 & 0x4L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x400400L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0x40000000000200L) != 0L || (active1 & 0x100L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active0 & 0x7000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400400L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 36, 34);
      case 39:
         return jjStartNfaWithStates_0(0, 35, 12);
      case 40:
         return jjStopAtPos(0, 28);
      case 41:
         return jjStopAtPos(0, 29);
      case 58:
         return jjStopAtPos(0, 27);
      case 59:
         return jjStopAtPos(0, 34);
      case 65:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x8001800000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10000009000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x400100L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0xa00000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x3f400000000000L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x180000002000800L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x3e00000000240000L, 0x0L);
      case 79:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x8000000000000010L, 0x7L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 82:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x4102080L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x1e00L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000L);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 95:
         return jjStopAtPos(0, 37);
      case 123:
         return jjStopAtPos(0, 32);
      case 125:
         return jjStopAtPos(0, 33);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 65:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x220002100000L, active1, 0x4200L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000040000L, active1, 0L);
      case 70:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 63, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000411100L, active1, 0xd41L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0x18L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000004002000L, active1, 0x6L);
      case 78:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 79:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc0084000020c800L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 82:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0x80L);
      case 83:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 7);
         break;
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x50100000000000L, active1, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000010000000480L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000002000L, active1, 0x20L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 67:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 7);
         break;
      case 68:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 7);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000400100L, active1, 0x1000L);
      case 71:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x4L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400000000000L, active1, 0L);
      case 73:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 7);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 7);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 77:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000080000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 7);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 7);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000600L, active1, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x18010L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 87:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 7);
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 90:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 63:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(3, 76);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 66:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x3080000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 69:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 7);
         break;
      case 70:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x440000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 72:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000020000L, active1, 0x100L);
      case 75:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 77:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 7);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 79:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000004000000L, active1, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 87:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 88:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x100L);
      case 68:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000010000L, active1, 0L);
      case 70:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 7);
         break;
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000040000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 7);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x400004000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x2400000000000L, active1, 0L);
      case 70:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 7);
         break;
      case 72:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 7);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 7);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 78:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 7);
         break;
      case 82:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 7);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 7);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 7);
         break;
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000400L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 7);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 7);
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x400400L, active1, 0L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L);
      case 82:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         break;
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 7);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 7);
         break;
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000000000L);
      case 73:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(8, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 89:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 79:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 48);
         break;
      case 82:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 34;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(6, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 34)
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  break;
               case 4:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 34 && kind > 81)
                     kind = 81;
                  break;
               case 11:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 45)
                     jjCheckNAddStates(6, 11);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar != 46)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(20, 27);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(0, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(7);
                  }
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 34:
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(7);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (curChar != 87)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(7);
                  break;
               case 12:
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjAddStates(24, 25);
                  break;
               case 23:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjAddStates(26, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 34 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x20L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_1(active0, 0x20L);
      default :
         return 3;
   }
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(3, 5);
         break;
      default :
         return 4;
   }
   return 4;
}
static final int[] jjnextStates = {
   21, 23, 27, 28, 30, 26, 20, 14, 27, 30, 31, 32, 21, 23, 26, 21, 
   22, 23, 26, 21, 23, 27, 28, 26, 17, 18, 24, 25, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\123\125\115", "\104\111\106\106", 
"\120\122\117\104\125\113\124", "\121\125\117\123\110\125\116\124", "\115\117\104", "\102\111\107\107\122", 
"\123\115\101\114\114\122", "\127\117\116", "\102\117\124\110", "\105\111\124\110\105\122", 
"\125\120\120\111\116", "\116\105\122\106\111\116", "\122", "\123\101\105\115", "\116\117\124", 
"\104\111\106\106\122\111\116\124", "\101\114\114", "\101\116\131", "\115\101\105\113", 
"\123\115\117\117\123\110", "\72", "\50", "\51", "\133", "\135", "\173", "\175", "\73", "\47", "\42", 
"\137", "\101", "\101\116", "\102\125\113\113\111\124", "\106\101\111\114", 
"\106\117\125\116\104", "\107\111\115\115\105\110", "\107\124\106\117", "\110\101\111", 
"\111\40\110\101\123\40\101", "\110\117\127\40\104\125\132\40\111", 
"\111\106\40\125\40\123\101\131\40\123\117", "\111\115\40\111\116\40\131\122", 
"\111\115\40\117\125\124\124\101\40\131\122", "\111\124", "\111\124\132", "\111\123", "\113\124\110\130\102\131\105", 
"\115\105\102\102\105", "\115\113\101\131", "\116\117", "\116\117\117\102", "\116\117\127", 
"\116\125\115\102\101\122", "\116\125\115\102\122", "\117", "\117\106", "\117\111\103", "\117\115\107", 
"\117\115\107\127\124\106", "\122\114\131", "\122\114\131\77", "\124\110\101\116", "\124\111\114", 
"\124\122\117\117\106", "\126\111\123\111\102\114\105", "\127\101\111", "\127\111\114\105", 
"\127\111\116", "\127\124\106\77", "\131\101", "\131\101\122\116", "\131\122", null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x1fffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[34];
static private final int[] jjstateSet = new int[68];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public LOLCodeParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public LOLCodeParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 34; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 6)
       {
          jjmatchedKind = 6;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
        debugStream.println("ADD token: " + matchedToken.image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
        debugStream.println("SUBTRACT token: " + matchedToken.image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
        debugStream.println("MULTIPLY token: " + matchedToken.image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
        debugStream.println("DIVIDE token: " + matchedToken.image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
        debugStream.println("MODULO token: " + matchedToken.image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
        debugStream.println("BIGGR token: " + matchedToken.image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
        debugStream.println("SMALLR token: " + matchedToken.image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
        debugStream.println("XOR token: " + matchedToken.image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
        debugStream.println("LOGICAL_AND token: " + matchedToken.image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
        debugStream.println("LOGICAL_OR token: " + matchedToken.image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
        debugStream.println("INCREMENT token: " + matchedToken.image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
        debugStream.println("DECREMENT token: " + matchedToken.image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
        debugStream.println("ASSIGNMENT token: " + matchedToken.image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
        debugStream.println("EQUALS token: " + matchedToken.image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
        debugStream.println("LOGICAL_NOT token: " + matchedToken.image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
        debugStream.println("NOT_EQUALS token: " + matchedToken.image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
        debugStream.println("ALL token: " + matchedToken.image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
        debugStream.println("ANY token: " + matchedToken.image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
        debugStream.println("MAEK token: " + matchedToken.image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
        debugStream.println("CONCATENATION token: " + matchedToken.image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
        debugStream.println("COLON token: " + matchedToken.image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
        debugStream.println("OPEN_PARENS token: " + matchedToken.image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
        debugStream.println("CLOSE_PARENS token: " + matchedToken.image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
        debugStream.println("OPEN_BRACKET token: " + matchedToken.image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
        debugStream.println("CLOSE_BRACKET token: " + matchedToken.image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
        debugStream.println("OPEN_BRACE token: " + matchedToken.image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
        debugStream.println("CLOSE_BRACE token: " + matchedToken.image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
        debugStream.println("SEMICOLON token: " + matchedToken.image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
        debugStream.println("SINGLE_QUOTE token: " + matchedToken.image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
        debugStream.println("DBL_QUOTE token: " + matchedToken.image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
        debugStream.println("UNDERSCORE token: " + matchedToken.image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
        debugStream.println("RESERVED WORD token: " + matchedToken.image);
         break;
      case 80 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("IDENTIFIER token: " + matchedToken.image);
         break;
      case 81 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("STRING token: " + matchedToken.image);
         break;
      case 82 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("CHARACTER token: " + matchedToken.image);
         break;
      case 83 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("REAL_NUMBER token: " + matchedToken.image);
         break;
      case 84 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("DECIMAL_INTEGER token: " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
