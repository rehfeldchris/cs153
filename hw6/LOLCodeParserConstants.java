/* Generated By:JavaCC: Do not edit this line. LOLCodeParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LOLCodeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ADD = 7;
  /** RegularExpression Id. */
  int SUBTRACT = 8;
  /** RegularExpression Id. */
  int MULTIPLY = 9;
  /** RegularExpression Id. */
  int DIVIDE = 10;
  /** RegularExpression Id. */
  int MODULO = 11;
  /** RegularExpression Id. */
  int MAXIMUM = 12;
  /** RegularExpression Id. */
  int MINIMUM = 13;
  /** RegularExpression Id. */
  int XOR = 14;
  /** RegularExpression Id. */
  int LOGICAL_AND = 15;
  /** RegularExpression Id. */
  int LOGICAL_OR = 16;
  /** RegularExpression Id. */
  int INCREMENT = 17;
  /** RegularExpression Id. */
  int DECREMENT = 18;
  /** RegularExpression Id. */
  int ASSIGNMENT = 19;
  /** RegularExpression Id. */
  int EQUAL = 20;
  /** RegularExpression Id. */
  int LOGICAL_NOT = 21;
  /** RegularExpression Id. */
  int NOT_EQUAL = 22;
  /** RegularExpression Id. */
  int ALL = 23;
  /** RegularExpression Id. */
  int ANY = 24;
  /** RegularExpression Id. */
  int MAEK = 25;
  /** RegularExpression Id. */
  int SMOOSH = 26;
  /** RegularExpression Id. */
  int COLON = 27;
  /** RegularExpression Id. */
  int OPEN_PARENS = 28;
  /** RegularExpression Id. */
  int CLOSE_PARENS = 29;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 30;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 31;
  /** RegularExpression Id. */
  int OPEN_BRACE = 32;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int QUOTE = 35;
  /** RegularExpression Id. */
  int DBL_QUOTE = 36;
  /** RegularExpression Id. */
  int UNDERSCORE = 37;
  /** RegularExpression Id. */
  int A = 38;
  /** RegularExpression Id. */
  int AN = 39;
  /** RegularExpression Id. */
  int DUZ = 40;
  /** RegularExpression Id. */
  int FAIL = 41;
  /** RegularExpression Id. */
  int FOUND = 42;
  /** RegularExpression Id. */
  int GIMMEH = 43;
  /** RegularExpression Id. */
  int GTFO = 44;
  /** RegularExpression Id. */
  int HAI = 45;
  /** RegularExpression Id. */
  int HAS = 46;
  /** RegularExpression Id. */
  int HOW = 47;
  /** RegularExpression Id. */
  int I = 48;
  /** RegularExpression Id. */
  int IF = 49;
  /** RegularExpression Id. */
  int IM = 50;
  /** RegularExpression Id. */
  int IN = 51;
  /** RegularExpression Id. */
  int IT = 52;
  /** RegularExpression Id. */
  int ITZ = 53;
  /** RegularExpression Id. */
  int IS = 54;
  /** RegularExpression Id. */
  int KTHXBYE = 55;
  /** RegularExpression Id. */
  int MEBBE = 56;
  /** RegularExpression Id. */
  int MKAY = 57;
  /** RegularExpression Id. */
  int NO = 58;
  /** RegularExpression Id. */
  int NOOB = 59;
  /** RegularExpression Id. */
  int NOW = 60;
  /** RegularExpression Id. */
  int NUMBAR = 61;
  /** RegularExpression Id. */
  int NUMBR = 62;
  /** RegularExpression Id. */
  int O = 63;
  /** RegularExpression Id. */
  int OF = 64;
  /** RegularExpression Id. */
  int OIC = 65;
  /** RegularExpression Id. */
  int OMG = 66;
  /** RegularExpression Id. */
  int OMGWTF = 67;
  /** RegularExpression Id. */
  int OUTTA = 68;
  /** RegularExpression Id. */
  int RLY = 69;
  /** RegularExpression Id. */
  int RLYQ = 70;
  /** RegularExpression Id. */
  int SAY = 71;
  /** RegularExpression Id. */
  int SO = 72;
  /** RegularExpression Id. */
  int TIL = 73;
  /** RegularExpression Id. */
  int TROOF = 74;
  /** RegularExpression Id. */
  int U = 75;
  /** RegularExpression Id. */
  int VISIBLE = 76;
  /** RegularExpression Id. */
  int WAI = 77;
  /** RegularExpression Id. */
  int WILE = 78;
  /** RegularExpression Id. */
  int WIN = 79;
  /** RegularExpression Id. */
  int WTF = 80;
  /** RegularExpression Id. */
  int YA = 81;
  /** RegularExpression Id. */
  int YARN = 82;
  /** RegularExpression Id. */
  int YR = 83;
  /** RegularExpression Id. */
  int IDENTIFIER = 84;
  /** RegularExpression Id. */
  int STRING = 85;
  /** RegularExpression Id. */
  int CHARACTER = 86;
  /** RegularExpression Id. */
  int REAL_NUMBER = 87;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER = 88;
  /** RegularExpression Id. */
  int DIGIT = 89;
  /** RegularExpression Id. */
  int LETTER = 90;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\"OBTW\"",
    "\"TLDR\"",
    "<token of kind 6>",
    "\"SUM\"",
    "\"DIFF\"",
    "\"PRODUKT\"",
    "\"QUOSHUNT\"",
    "\"MOD\"",
    "\"BIGGR\"",
    "\"SMALLR\"",
    "\"WON\"",
    "\"BOTH\"",
    "\"EITHER\"",
    "\"UPPIN\"",
    "\"NERFIN\"",
    "\"R\"",
    "\"SAEM\"",
    "\"NOT\"",
    "\"DIFFRINT\"",
    "\"ALL\"",
    "\"ANY\"",
    "\"MAEK\"",
    "\"SMOOSH\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"_\"",
    "\"A\"",
    "\"AN\"",
    "\"DUZ\"",
    "\"FAIL\"",
    "\"FOUND\"",
    "\"GIMMEH\"",
    "\"GTFO\"",
    "\"HAI\"",
    "\"HAS\"",
    "\"HOW\"",
    "\"I\"",
    "\"IF\"",
    "\"IM\"",
    "\"IN\"",
    "\"IT\"",
    "\"ITZ\"",
    "\"IS\"",
    "\"KTHXBYE\"",
    "\"MEBBE\"",
    "\"MKAY\"",
    "\"NO\"",
    "\"NOOB\"",
    "\"NOW\"",
    "\"NUMBAR\"",
    "\"NUMBR\"",
    "\"O\"",
    "\"OF\"",
    "\"OIC\"",
    "\"OMG\"",
    "\"OMGWTF\"",
    "\"OUTTA\"",
    "\"RLY\"",
    "\"RLY?\"",
    "\"SAY\"",
    "\"SO\"",
    "\"TIL\"",
    "\"TROOF\"",
    "\"U\"",
    "\"VISIBLE\"",
    "\"WAI\"",
    "\"WILE\"",
    "\"WIN\"",
    "\"WTF?\"",
    "\"YA\"",
    "\"YARN\"",
    "\"YR\"",
    "<IDENTIFIER>",
    "<STRING>",
    "<CHARACTER>",
    "<REAL_NUMBER>",
    "<DECIMAL_INTEGER>",
    "<DIGIT>",
    "<LETTER>",
  };

}
