options {
    BUILD_PARSER=true;
    IGNORE_CASE=false;
    //DEBUG_TOKEN_MANAGER=true;
    //DEBUG_PARSER=true;
}

PARSER_BEGIN(LOLCodeParser)
import java.io.*;
    public class LOLCodeParser
    {
	  public static void main(String[] args) throws FileNotFoundException 
	  {	     java.io.FileReader inputFile = new java.io.FileReader(args[0]);
	     LOLCodeParser parser = new LOLCodeParser(inputFile);

	     try {
	        parser.LOLCodeProgram();
	     } 
	     catch (ParseException ex) {
	       ex.printStackTrace();
	     }	      	    
	  }      
    }
PARSER_END(LOLCodeParser)

SKIP : {
  <[" ", "\t"]>
| <["\r", "\n"] >
| < "BTW" (~["\r", "\n"])*>
| < "OBTW" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{  < "TLDR" > : DEFAULT
| < ~[] >   
}

TOKEN : /* OPERATORS */
{
  < ADD : "SUM" >
      { debugStream.println("ADD token: " + matchedToken.image); }
| < SUBTRACT : "DIFF" >
      { debugStream.println("SUBTRACT token: " + matchedToken.image); }
| < MULTIPLY : "PRODUKT" >
      { debugStream.println("MULTIPLY token: " + matchedToken.image); }
| < DIVIDE : "QUOSHUNT" >
      { debugStream.println("DIVIDE token: " + matchedToken.image); }
| < MODULO : "MOD" >
      { debugStream.println("MODULO token: " + matchedToken.image); }
| < MAXIMUM : "BIGGR" >
      { debugStream.println("MAXIMUM token: " + matchedToken.image); }
| < MINIMUM : "SMALLR" >
      { debugStream.println("MINIMUM token: " + matchedToken.image); }            
| < XOR : "WON" >
      { debugStream.println("XOR token: " + matchedToken.image); }
| < LOGICAL_AND : "BOTH" >
      { debugStream.println("LOGICAL_AND token: " + matchedToken.image); }
| < LOGICAL_OR : "EITHER" >
      { debugStream.println("LOGICAL_OR token: " + matchedToken.image); }
| < INCREMENT: "UPPIN" >
      { debugStream.println("INCREMENT token: " + matchedToken.image); }
| < DECREMENT: "NERFIN" >
      { debugStream.println("DECREMENT token: " + matchedToken.image); }
| < ASSIGNMENT: "R" >
      { debugStream.println("ASSIGNMENT token: " + matchedToken.image); }
| < EQUAL: "SAEM" >
      { debugStream.println("EQUALS token: " + matchedToken.image); }
| < LOGICAL_NOT : "NOT" >
      { debugStream.println("LOGICAL_NOT token: " + matchedToken.image); }
| < NOT_EQUAL: "DIFFRINT" >
      { debugStream.println("NOT_EQUALS token: " + matchedToken.image); }
| < ALL: "ALL" >
      { debugStream.println("ALL token: " + matchedToken.image); }
| < ANY: "ANY" >
      { debugStream.println("ANY token: " + matchedToken.image); }
| < MAEK: "MAEK" >
      { debugStream.println("MAEK token: " + matchedToken.image); }
| < SMOOSH: "SMOOSH" >
      { debugStream.println("CONCATENATION token: " + matchedToken.image); }                  
}

TOKEN : /* Scope tokens */
{
  < COLON : ":" >
      { debugStream.println("COLON token: " + matchedToken.image); }
  | < OPEN_PARENS : "(" >
      { debugStream.println("OPEN_PARENS token: " + matchedToken.image); }
  | < CLOSE_PARENS : ")" >
      { debugStream.println("CLOSE_PARENS token: " + matchedToken.image); }
  | < OPEN_BRACKET : "[" >
      { debugStream.println("OPEN_BRACKET token: " + matchedToken.image); }
  | < CLOSE_BRACKET : "]" >
      { debugStream.println("CLOSE_BRACKET token: " + matchedToken.image); }
  | < OPEN_BRACE : "{" >
      { debugStream.println("OPEN_BRACE token: " + matchedToken.image); }
  | < CLOSE_BRACE : "}" >
      { debugStream.println("CLOSE_BRACE token: " + matchedToken.image); }
  | < SEMICOLON : ";" >
      { debugStream.println("SEMICOLON token: " + matchedToken.image); }
  | < QUOTE: "\'" >
      { debugStream.println("SINGLE_QUOTE token: " + matchedToken.image); }
  | < DBL_QUOTE: "\"" >
      { debugStream.println("DBL_QUOTE token: " + matchedToken.image); }
  | < UNDERSCORE : "_" >
      { debugStream.println("UNDERSCORE token: " + matchedToken.image); }
}

TOKEN : /* Reserved words */
{
  < A : "A" > // variable declaration/re-cast end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }    
  | < AN : "AN" >  // operand separator
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < BUKKIT : "BUKKIT" >  // array keyword
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < DUZ: "DUZ" > // function start middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                  
  | < FAIL: "FAIL" > // boolean false
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < FOUND: "FOUND" > // return
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < GIMMEH: "GIMMEH" > // take input
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < GTFO: "GTFO" > // break
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < HAI: "HAI" > // program start
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < HAS: "HAS" > // variable declaration middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < HOW: "HOW" > // function start begin
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                  
  | < I: "I" > // variable declaration start & function start end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < IF: "IF" > // function end start
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < IM: "IM" > // loop start/end begin
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < IN: "IN" > // loop start middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
  | < IT: "IT" > // temporary variable identifier
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < ITZ: "ITZ" > // variable declaration initialize
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < IS: "IS" > // re-cast start
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                              
  | < KTHXBYE: "KTHXBYE" > // program end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < MEBBE: "MEBBE" > // if statement optional expression block start
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < MKAY: "MKAY" > // operator list closer
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < NO: "NO" > // if statement false start
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                  
  | < NOOB: "NOOB" > // untyped
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < NOW: "NOW" > // re-cast middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
  | < NUMBAR: "NUMBAR" > // integer
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }      
  | < NUMBR: "NUMBR" > // real/float
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < O: "O" > // if statement start begin
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < OF: "OF" > // used in many operators
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < OIC: "OIC" > // if statement end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                              
  | < OMG: "OMG" > // case
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < OMGWTF: "OMGWTF" > // default case
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < OUTTA: "OUTTA" > // loop end middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < RLY: "RLY" > // if statement true end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < RLYQ: "RLY?" > // if statement start end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < SAY: "SAY" > // function end middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < SO: "SO" > // function end end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
  | < TIL: "TIL" > // until
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
  | < TROOF: "TROOF" > // boolean
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < U: "U" > // function end middle
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < VISIBLE: "VISIBLE" > // print out
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < WAI: "WAI" > // if statement false end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
  | < WILE: "WILE" > // while
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < WIN: "WIN" > // boolean true
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < WTF: "WTF?" > // switch
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < YA: "YA" > // if statement true begin
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }            
  | < YARN: "YARN" > // string
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }
  | < YR: "YR" > // loop start/end end / return end
      { debugStream.println("RESERVED WORD token: " + matchedToken.image); }                        
}

TOKEN : { /* Types like IDENTIFIER, CHAR, NUMBER */
    <IDENTIFIER : (<LETTER>)+>
      { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
  | < STRING: "\"" (~["\n", "\r", "\""])* "\"" >
      { debugStream.println("STRING token: " + matchedToken.image); }
  | < CHARACTER: "'" (~[]){1} "'" >
      { debugStream.println("CHARACTER token: " + matchedToken.image); }
  | < REAL_NUMBER: (<DECIMAL_INTEGER>)(["."])?(<DIGIT>)*["e", "E"](["+", "-"])?(<DIGIT>)* |
                   ["."](<DIGIT>)+(["e", "E"](["+", "-"])?(<DIGIT>)*)? |
                   (<DECIMAL_INTEGER>)["."](<DIGIT>)* >
      { debugStream.println("REAL_NUMBER token: " + matchedToken.image); }
  | < DECIMAL_INTEGER: "0" | ["1"-"9"](<DIGIT>)* >
      { debugStream.println("DECIMAL_INTEGER token: " + matchedToken.image); }       
  | <#DIGIT : ["0"-"9"]>
  | <#LETTER : ["a"-"z", "A"-"Z"]>
}

void LOLCodeProgram() : {}
{  programStart()
  codeBlock()
  programEnd()

  {System.out.println("Parsed LOLCode Program");}    
}

void codeBlock() : {}
{	(
	  LOOKAHEAD(1)
	  expressionOrStatement()
	)*
}
  
void Variable(StringBuffer sb) : {}
{
  <IDENTIFIER> {sb.append(token.image);}
  {System.out.println("Variable: " + sb.toString());}         
}

void programStart() : {}{
  	<HAI> }


void programEnd() : {}
{
  	<KTHXBYE> <EOF>
}

void expressionOrStatement() : {}
{
  	LOOKAHEAD(1)
	statement() | expression()
}

void statement() : {}
{
  	LOOKAHEAD(4)	  ifStatement()
	| whileStatement()
	| variableAssignmentStatement()
	| caseStatement()
	| functionDeclarationStatement()
	| variableDeclarationStatement()
}

void ifStatement() : {}{
  <O> <RLY>
  	<YA> <RLY>
  		codeBlock()
  	(<NO> <WAI>
  		codeBlock())?
  <OIC>  	  }

void whileStatement() : {}
{
  <IM> <IN> <YR> <IDENTIFIER> ((<INCREMENT> | <DECREMENT>) <YR> <IDENTIFIER>) (<TIL> | <WILE> expression())?
  	codeBlock()
  <IM> <OUTTA> <YR> <IDENTIFIER>
}

void caseStatement() : {}
{
  <WTF>
  	(<OMG> constantExpression() // 1 or more cases
  		codeBlock()
  	)+
  	(<OMGWTF> codeBlock())?     // optional default
  <OIC>  	  
}

void functionDeclarationStatement() : {}
{
  <HOW> <DUZ> <I> <IDENTIFIER> (<YR> <IDENTIFIER> (<AN> <YR> <IDENTIFIER>)*)?
  		codeBlock()
  <IF> <U> <SAY> <SO> 
}

void expression() : {}{
	LOOKAHEAD(2)
	  simpleExpression()
	| basicMathExpression()
	| booleanExpression()
	| stringConcatenationExpression()
	| typeCastExpression()
	| unaryExpression()
}

void basicMathExpression() : {}
{
	  additionExpression()
	| subtractionExpression()
	| multiplicationExpression()
	| divisionExpression()
	| moduloExpression()
	| maximumExpression()
	| minimumExpression()
}

void booleanExpression() : { }
{
  /*two of the productions start with the LOGICAL_AND token, but the productions diverge by the second token, so lookahead(2) is enough. */
  LOOKAHEAD(2)
	  logicalAndExpression()
	| logicalOrExpression()
	| logicalXorExpression()
	| logicalNotExpression()
	| logicalAndListExpression()
	| logicalOrListExpression()
	| equalsExpression()
	| notEqualsExpression() 
}

void constantExpression() : {}
{
	<STRING> | <CHARACTER> | <REAL_NUMBER> | <DECIMAL_INTEGER> | troof()
}

void simpleExpression() : {}
{
	<IDENTIFIER> | constantExpression()
}



void binaryOperands() : {}
{
	expression() (<AN>)? expression()
}


void variableArityOperands() : {}
{
/*
the spec says you can use the end of line character in place of "mkay" to terminate the var args list.
a single EOL needs to terminate all currently open var args lists though, because there could be nested function calls.
so, we need to pay special attention whenever we actually implement this feature.

for now, we always require an mkay token.
*/
	expression() (<MKAY> | (<AN>)? variableArityOperands())
}



/*Some basic math operators follow, like addition, subtraction etc...*/


void additionExpression() : {}
{
	<ADD> <OF> binaryOperands()
}

void subtractionExpression() : {}
{
	<SUBTRACT> <OF> binaryOperands()
}

void multiplicationExpression() : {}
{
	<MULTIPLY> <OF> binaryOperands()
}

void divisionExpression() : {}
{
	<DIVIDE> <OF> binaryOperands()
}

void moduloExpression() : {}
{
	<MODULO> <OF> binaryOperands()
}

void maximumExpression() : {}
{
	<MAXIMUM> <OF> binaryOperands()
}

void minimumExpression() : {}
{
	<MINIMUM> <OF> binaryOperands()
}

void unaryExpression() : {}
{
	(<INCREMENT> | <DECREMENT>) expression()
}






/* Some statements for assigning and declaring variables follow */
void variableDeclarationStatement() : {System.out.println("variableDeclarationStatement");}
{
	<I> <HAS> <A> <IDENTIFIER> (<ITZ> expression())?
}
void variableAssignmentStatement() : {System.out.println("variableAssignmentStatement");}
{
	<IDENTIFIER> <ASSIGNMENT> expression()
}

void variableDeclaration() : {System.out.println("variableDeclaration");}
{
	<I> <HAS> <A> <IDENTIFIER>
}




/* Some boolean operators follow */


void logicalAndExpression() : {}
{
	<LOGICAL_AND> <OF> binaryOperands()
}

void logicalOrExpression() : {}
{
	<LOGICAL_OR> <OF> binaryOperands()
}

void logicalXorExpression() : {}
{
	<XOR> <OF> binaryOperands()
}

void logicalNotExpression() : {}
{
	<LOGICAL_NOT> expression()
}

/*"all of foo an bar an baz" in lolcode is like "foo && bar && baz" in java*/
void logicalAndListExpression() : {}
{
	<ALL> <OF> variableArityOperands()
}

/*"any of foo an bar an baz" in lolcode is like "foo || bar || baz" in java*/
void logicalOrListExpression() : {}
{
	<ANY> <OF> variableArityOperands()
}



/*comparison operators*/

void equalsExpression() : {}
{
  	/*example: BOTH SAEM 1 AN 2*/
	<LOGICAL_AND> <EQUAL> binaryOperands()
}

void notEqualsExpression() : {}
{
  	/*example: DIFFRINT 1 AN 2*/
	<NOT_EQUAL> binaryOperands()
}



/*string concatenation*/

void stringConcatenationExpression() : {}
{
  	<SMOOSH> variableArityOperands()
}


/*types and casting */
void type() : {}
{
  	<TROOF> | <YARN> | <NUMBAR> | <NUMBR> | <NOOB> | <BUKKIT>
}

void troof() : {}
{
  	<WIN> | <FAIL>
}

void typeCastExpression() : {}
{
   (<MAEK> expression() (<A>)? type())
 | (<IDENTIFIER> <IS> <NOW> <A> type())
}

