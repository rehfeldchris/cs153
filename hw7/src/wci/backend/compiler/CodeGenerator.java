package wci.backend.compiler;

import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;

import wci.frontend.*;
import wci.intermediate.*;
import wci.intermediate.symtabimpl.Predefined;
import wci.backend.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;

/**
 * <p>The code generator for a compiler back end.</p>
 *
 * <p>Copyright (c) 2008 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
public class CodeGenerator extends Backend
{
    private static final int STACK_LIMIT = 16;
        
    static ICode iCode;
    static SymTabStack symTabStack;
    static PrintWriter objectFile;

    public void processFunction(ICode iCode, SymTabStack symTabStack,
                        		String objectFilePath, SymTabEntry functionId) throws IOException
    {
    	CodeGenerator.iCode       = iCode;
        CodeGenerator.symTabStack = symTabStack;
        // Open the file in append mode
        CodeGenerator.objectFile  = new PrintWriter(new BufferedWriter(new FileWriter(objectFilePath, true)));
                        
        //SymTab routineSymTab = (SymTab) functionId.getAttribute(ROUTINE_SYMTAB);
        //ArrayList<SymTabEntry> locals = routineSymTab.sortedEntries();

        // Make the function declaration
        String fName = functionId.getDefinition().toString();
        ArrayList<SymTabEntry> params = (ArrayList<SymTabEntry>) functionId.getAttribute(ROUTINE_PARMS);
        
        //  TODO: Figure out how to type the parameters
        // TODO: Figure out the return type
        
        pln();
        p(".method private static " + fName + "(");
        
        for (SymTabEntry param : params)
        	p("jbin/runtime/variant/Variant;");
        pln(")jbin/runtime/variant/Variant");
        
        // Visit the parse tree nodes to generate code for this function
        CodeGeneratorVisitor codeVisitor = new CodeGeneratorVisitor();
        Node rootNode = iCode.getRoot();
        rootNode.jjtAccept(codeVisitor, functionId);
        
        // approximate the number of slots needed for local variables
        SymTabEntry programId = symTabStack.getProgramId();
        int localsCount = (Integer) programId.getAttribute(ROUTINE_LOCALS_COUNT);
        int localSlots = (localsCount * 2) + 1;
        
        // Generate the function epilogue
        pln();
        pln("    return");
        pln();
        pln(".limit locals " + localSlots);
        pln(".limit stack  " + STACK_LIMIT);
        pln(".end method");
        objectFile.flush();

        CodeGenerator.objectFile.close();
    }
    
    
    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to generate machine-language instructions.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table stack.
     * @param objectFile the object file path for the generated code.
     * @throws Exception if an error occurred.
     */
    public void process(ICode iCode, SymTabStack symTabStack,
                        String objectFilePath)
        throws Exception
    {
       CodeGenerator.iCode       = iCode;
       CodeGenerator.symTabStack = symTabStack;
       CodeGenerator.objectFile  = new PrintWriter(objectFilePath);

       // Make the program and method names.
       int start = objectFilePath.lastIndexOf("/") + 1;
       String programName = objectFilePath.substring(start);
       int end = programName.indexOf(".");
       if (end > -1) {
           programName = programName.substring(0, end);
       }
       programName = programName.substring(0, 1).toUpperCase() +
                     programName.substring(1);
       String methodName = programName.substring(0, 1).toLowerCase() +
                           programName.substring(1);
       
       SymTabEntry programId = symTabStack.getProgramId();
       int localsCount = 
               (Integer) programId.getAttribute(ROUTINE_LOCALS_COUNT);
       SymTab routineSymTab = 
               (SymTab) programId.getAttribute(ROUTINE_SYMTAB);
       ArrayList<SymTabEntry> locals = routineSymTab.sortedEntries();

       // Generate the program header.
       pln(".class public " + programName);
       pln(".super java/lang/Object");
       pln();
       
       // Generate code for the timer and standard input fields.
//       pln(".field private static _runTimer LRunTimer;");
//       pln(".field private static _standardIn LPascalTextIn;");
//       pln();
       
       // Generate code for fields.
       for (SymTabEntry id : locals) {
           Definition defn = id.getDefinition();
           
           if (defn == VARIABLE) {
               String fieldName = id.getName();
               TypeSpec type = id.getTypeSpec();
               String typeCode = type == Predefined.integerType ? "I" : "F";
               pln(".field private static " + fieldName + " " + typeCode);
           }
       }
       pln();
       
       // Generate the class constructor.
       pln(".method public <init>()V");
       pln();
       pln("  aload_0");
       pln("  invokenonvirtual  java/lang/Object/<init>()V");
       pln("  return");
       pln();
       pln(".limit locals 1");
       pln(".limit stack 1");
       pln(".end method");
       pln();
       
       // Generate the main method header.
       pln(".method public static main([Ljava/lang/String;)V");
       pln();
       
       // Generate the main method prologue.
/*       pln("    new  PascalTextIn");
       pln("    dup");
       pln("    invokenonvirtual   PascalTextIn/<init>()V");
       pln("    putstatic " + programName + "/_standardIn LPascalTextIn;");
       pln();
       objectFile.flush();
*/
       // Visit the parse tree nodes to generate code 
       // for the main method's compound statement.
       CodeGeneratorVisitor codeVisitor = new CodeGeneratorVisitor();
       Node rootNode = iCode.getRoot();
       rootNode.jjtAccept(codeVisitor, programName);
       pln();

       //in main, theres always 1 arg, and so we need a local for it.
       //I multiple by 2 because i fear we may add a double or a long, which needs 2 slots ea.
       int localSlots = (localsCount * 2) + 1;
       // Generate the main method epilogue.
       pln();
       pln("    return");
       pln();
       pln(".limit locals " + localSlots);
       pln(".limit stack  " + STACK_LIMIT);
       pln(".end method");
       objectFile.flush();

       CodeGenerator.objectFile.close();
       
    }
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * below are some short-named aliases to 
     * help improve code legibility.
     */
    static void p(String s) {
    	objectFile.print(s);
    }
    
    static void pln(String s) {
    	objectFile.println(s);
    }
    
    static void pln() {
    	objectFile.println();
    }
    
    static void pf(String format, Object... args) {
    	objectFile.printf(format, args);
    }
    
    static void flush() {
    	objectFile.flush();
    }
    
    /**
     * The methods below try to convert an instruction to the shortcut version.
     * 
     * eg, 
     * 
     * iconst(3) == "iconst_3"
     * 
     * but 
     * 
     * iconst(6) == "iconst 6"
     * 
     */
    static String iconst(int val) {
		if (isEqualToOneOf(val, 0, 1, 2, 3, 4, 5)) {
			return "iconst_" + val;
		}
		if (val == -1) {
			return "iconst_m1";
		}
		return "iconst " + val;
    }
    
    static String lconst(long val) {
		if (isEqualToOneOf(val, 0, 1)) {
			return "lconst_" + val;
		}
		return "lconst " + val;
    }
    
    static String fconst(double val) {
		if (isEqualToOneOf(val, 0, 1, 2)) {
			return "fconst_" + (int) val;
		}
		return "fconst " + val;
    }
    
    static String dconst(float val) {
		if (isEqualToOneOf(val, 0, 1)) {
			return "dconst_" + (int) val;
		}
		return "dconst " + val;
    }
    
    
    static String load(int slot) {
		if (isEqualToOneOf(slot, 0, 1, 2, 3)) {
			return "load_" + slot;
		}
		return "load " + slot;
    }
    
    static String iload(int slot) {
		return "i" + load(slot);
    }
    
    static String lload(int slot) {
		return "l" + load(slot);
    }
    
    static String fload(int slot) {
		return "f" + load(slot);
    }
    
    static String dload(int slot) {
		return "d" + load(slot);
    }
    
    static String aload(int slot) {
		return "a" + load(slot);
    }
    
    static boolean between(long val, long min, long max) {
    	return val >= min && val <= max;
    }
    static boolean between(double val, double min, double max) {
    	return val >= min && val <= max;
    }
    
    static boolean isEqualToOneOf(double val, Integer... ints) {
    	double epsilon = 0.000000001D;
    	for (int i : ints) {
    		if(Math.abs(val - i) < epsilon) {
    			return true;
    		}
    	}
    	return false;
    }
    static boolean isEqualToOneOf(int val, Integer... ints) {
    	return Arrays.asList(ints).contains(val);
    }
}
